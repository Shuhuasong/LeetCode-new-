
public int lengthOfLongestSubstring(String s, int k){
   int n = s.length(), l = 0, r = 0;
   Map<Character, Integer> map = new HashMap<>();
   while(r<n){
     char c = s.charAt(r);
     map.put(c, r);
     r++;
     if(map.size() == k+1){
       int delIdx = Collections.min(map.values());
       map.remove(s.charAt(delIdx);
       l = delIdx + 1;
       res = Math.max(res, r-l);
     }
     return res;
   }
}

public int[] windowSum(int[] nums, int k){
  if(nums==null || nums.length < k) return new int[0];
  if(k==0) return new int[nums.length];
  int[] res = new int[nums.length-k+1];
  int j = 0, sum = 0;
  for(int i=0; i<nums.length; j++){
     while(j<nums.length && j-i < k){
        sum += nums[j];
        j++;
     }
     if(j-i==k){
        res[i] = sum;
     }
     sum -= nums[i];
  }
  return res;
}

public int characterReplacement(String s, int k){
  if(s==null) return 0;
  int n = s.length(), r = 0, maxFreq = 0;
  int res = 0, count = 0;
  Map<Character, Integer> map = new HashMap<>();
  for(int l=0; l<n; l++){
     while(r<n && r-l-maxFreq <= k){
        char c = s.charAt(r);
        map.put(c, map.getOrDefault(c, 0) + 1;
        mapFreq = Math.max(maxFreq, map.get(c));
        r++;
     }
     if(r-l-maxFreq > k){
       res = Math.max(res, r-l-1);
     }else{
       res = Math.max(res, r-l);
     }
     int count = map.get(s.charAt(l)) - 1;
     map.put(s.charAt(l), count);
     maxFreq = Collections.max(values());
   }
   return res;
}